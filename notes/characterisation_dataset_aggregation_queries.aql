///
// Test genomic dataset merger indexes minimum statistics.
///
LET items = (
    FOR dat IN Data
        FILTER dat.std_dataset_id == @dataset
        COLLECT species = dat.species
        INTO groups
        
    FOR doc IN Metaset
        FILTER doc.std_dataset_id == @dataset
        FILTER doc.species == species

    RETURN {
        species: species,
        properties: {
            [CONCAT_SEPARATOR("_", doc.chr_GenIndex, "marker")]: {
                [doc.chr_GenIndex]: MIN(groups[*].dat[doc.chr_GenIndex]),
                chr_MarkerType: doc.chr_MarkerType,
                chr_NumberOfLoci: doc.chr_NumberOfLoci,
                chr_SequenceLength: doc.chr_SequenceLength,
                chr_GenoTech: doc.chr_GenoTech
            }
        }
    }
)

FOR item IN items
    COLLECT species = item.species
    INTO groups
    
RETURN {
    species: species,
    properties: MERGE_RECURSIVE(groups[*].item.properties)
}


///
// Test genomic dataset merger indexes average statistics.
///
LET items = (
    FOR dat IN Data
        FILTER dat.std_dataset_id == @dataset
        COLLECT species = dat.species
        INTO groups
        
    FOR doc IN Metaset
        FILTER doc.std_dataset_id == @dataset
        FILTER doc.species == species

    RETURN {
        species: species,
        properties: {
            [CONCAT_SEPARATOR("_", doc.chr_GenIndex, "marker")]: {
                [doc.chr_GenIndex]: AVERAGE(groups[*].dat[doc.chr_GenIndex]),
                chr_MarkerType: doc.chr_MarkerType,
                chr_NumberOfLoci: doc.chr_NumberOfLoci,
                chr_SequenceLength: doc.chr_SequenceLength,
                chr_GenoTech: doc.chr_GenoTech
            }
        }
    }
)

FOR item IN items
    COLLECT species = item.species
    INTO groups
    
RETURN {
    species: species,
    properties: MERGE_RECURSIVE(groups[*].item.properties)
}


///
// Test genomic dataset merger indexes maximum statistics.
///
LET items = (
    FOR dat IN Data
        FILTER dat.std_dataset_id == @dataset
        COLLECT species = dat.species
        INTO groups
        
    FOR doc IN Metaset
        FILTER doc.std_dataset_id == @dataset
        FILTER doc.species == species

    RETURN {
        species: species,
        properties: {
            [CONCAT_SEPARATOR("_", doc.chr_GenIndex, "marker")]: {
                [doc.chr_GenIndex]: MAX(groups[*].dat[doc.chr_GenIndex]),
                chr_MarkerType: doc.chr_MarkerType,
                chr_NumberOfLoci: doc.chr_NumberOfLoci,
                chr_SequenceLength: doc.chr_SequenceLength,
                chr_GenoTech: doc.chr_GenoTech
            }
        }
    }
)

FOR item IN items
    COLLECT species = item.species
    INTO groups
    
RETURN {
    species: species,
    properties: MERGE_RECURSIVE(groups[*].item.properties)
}


///
// Test genomic dataset merger indexes standard deviation statistics.
///
LET items = (
    FOR dat IN Data
        FILTER dat.std_dataset_id == @dataset
        COLLECT species = dat.species
        INTO groups
        
    FOR doc IN Metaset
        FILTER doc.std_dataset_id == @dataset
        FILTER doc.species == species

    RETURN {
        species: species,
        properties: {
            [CONCAT_SEPARATOR("_", doc.chr_GenIndex, "marker")]: {
                [doc.chr_GenIndex]: STDDEV(groups[*].dat[doc.chr_GenIndex]),
                chr_MarkerType: doc.chr_MarkerType,
                chr_NumberOfLoci: doc.chr_NumberOfLoci,
                chr_SequenceLength: doc.chr_SequenceLength,
                chr_GenoTech: doc.chr_GenoTech
            }
        }
    }
)

FOR item IN items
    COLLECT species = item.species
    INTO groups
    
RETURN {
    species: species,
    properties: MERGE_RECURSIVE(groups[*].item.properties)
}


///
// Test genomic dataset merger indexes variance statistics.
///
LET items = (
    FOR dat IN Data
        FILTER dat.std_dataset_id == @dataset
        COLLECT species = dat.species
        INTO groups
        
    FOR doc IN Metaset
        FILTER doc.std_dataset_id == @dataset
        FILTER doc.species == species

    RETURN {
        species: species,
        properties: {
            [CONCAT_SEPARATOR("_", doc.chr_GenIndex, "marker")]: {
                [doc.chr_GenIndex]: VARIANCE(groups[*].dat[doc.chr_GenIndex]),
                chr_MarkerType: doc.chr_MarkerType,
                chr_NumberOfLoci: doc.chr_NumberOfLoci,
                chr_SequenceLength: doc.chr_SequenceLength,
                chr_GenoTech: doc.chr_GenoTech
            }
        }
    }
)

FOR item IN items
    COLLECT species = item.species
    INTO groups
    
RETURN {
    species: species,
    properties: MERGE_RECURSIVE(groups[*].item.properties)
}
