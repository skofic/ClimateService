UPDATES

///
// Dump Drought Observatory with dataset references.
///
LET links = {
	env_climate_cdi: "7b789ef4-aa2d-4f25-91c4-feab9d4cbb9b",
	env_climate_fapar: "056e569a-66ef-4033-8d15-5c4c3c36c1bb",
	env_climate_fapan: "056e569a-66ef-4033-8d15-5c4c3c36c1bb",
	env_climate_hcwi_min: "6b12011e-ef30-47d4-b4a3-3c8bdc4b4464",
	env_climate_hcwi_max: "6b12011e-ef30-47d4-b4a3-3c8bdc4b4464",
	env_climate_hcwi_ano: "6b12011e-ef30-47d4-b4a3-3c8bdc4b4464",
	env_climate_smi: "9eda6111-c840-4862-9759-4a805cd6fc35",
	env_climate_sma: "9eda6111-c840-4862-9759-4a805cd6fc35",
	env_climate_tws: "398f8b9b-9cd4-4fb5-bc4d-49b88a5d210a"
}

FOR doc IN VIEW_DROUGHT_OBSERVATORY
    
	LET dataset = (
		FOR item IN doc.std_terms
		RETURN TRANSLATE(item, links)
	)

RETURN {
	"std_date": doc.std_date,
	"properties": doc.properties,
	"std_terms": doc.std_terms,
	"std_dataset_ids": UNIQUE(dataset),
	"geometry_point_radius": doc.geometry_point_radius,
	"geometry_point": doc.geometry_point,
	"geometry_bounds": doc.geometry_bounds
}


DATA

///
// Return all data for given point by geometry.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )
    
    SORT shape.geometry_point_radius DESC

RETURN {
    geometry: shape.geometry,
    geometry_point: shape.geometry_point,
    geometry_point_radius: shape.geometry_point_radius,
    properties: (
        FOR data IN DroughtObservatory
            FILTER data.geometry_hash == shape._key
            SORT data.std_date ASC
        RETURN MERGE_RECURSIVE(
            { std_date: data.std_date },
            data.properties
        )
    )
}


///
// Return all data for given point by date.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )
    
    FOR data IN DroughtObservatory
        FILTER data.geometry_hash == shape._key
        SORT data.std_date ASC
        COLLECT date = data.std_date
        INTO items
        KEEP data

    RETURN {
        std_date: date,
        properties: MERGE_RECURSIVE(items[*].data.properties)
    }


///
// Return all data for given point by date range.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )
    
    FOR data IN DroughtObservatory
        FILTER data.geometry_hash == shape._key AND
               data.std_date >= @beg AND
               data.std_date <= @end
        SORT data.std_date ASC
        COLLECT date = data.std_date
        INTO items
        KEEP data

    RETURN {
        std_date: date,
        properties: MERGE_RECURSIVE(items[*].data.properties)
    }


///
// Return all data for given point by date range and descriptor.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )
    
    FOR data IN DroughtObservatory
        FILTER data.geometry_hash == shape._key AND
               data.std_date >= @beg AND
               data.std_date <= @end AND
               @descriptors ANY IN data.std_terms
        SORT data.std_date ASC
        COLLECT date = data.std_date
        INTO items
        KEEP data

    RETURN {
        std_date: date,
        properties: MERGE_RECURSIVE(items[*].data.properties)
    }


METADATA

///
// Return all metadata for given point.
///
FOR doc IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        doc.geometry
    )
    FOR dat IN DroughtObservatory
        FILTER dat.geometry_hash == doc._key
        COLLECT AGGREGATE start = MIN(dat.std_date),
                          end = MAX(dat.std_date)
        INTO groups
RETURN {
    start: start,
    end: end,
    terms: UNIQUE(FLATTEN(groups[*].dat.std_terms))
}


///
// Return all metadata for given point by geometry.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )
    FOR data IN DroughtObservatory
        FILTER data.geometry_hash == shape._key
        COLLECT   geometry = data.geometry_bounds,
                  geometry_point = data.geometry_point,
                  geometry_point_radius = data.geometry_point_radius
        AGGREGATE start = MIN(data.std_date),
                  end = MAX(data.std_date),
                  terms = UNIQUE(data.std_terms)
RETURN {
    geometry: geometry,
    geometry_point: geometry_point,
    geometry_point_radius: geometry_point_radius,
    start: start,
    end: end,
    terms: FLATTEN(terms)
}
    
    
///
// Return all metadata for given point by date range.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )
    
    FOR data IN DroughtObservatory
        FILTER data.geometry_hash == shape._key AND
               data.std_date >= @beg AND
               data.std_date <= @end
               
        COLLECT AGGREGATE start = MIN(data.std_date),
                          end   = MAX(data.std_date),
                          terms = UNIQUE(data.std_terms)

    RETURN {
        start: start,
        end: end,
        terms: FLATTEN(terms)
    }


///
// Return properties count for given point.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )

    FOR data IN DroughtObservatory
        FILTER data.geometry_hash == shape._key
        
        COLLECT AGGREGATE count = COUNT()

RETURN count


///
// Return properties count for given point by geometry.
///
FOR shape IN DroughtObservatoryMap
    FILTER GEO_INTERSECTS(
        GEO_POINT(@longitude, @latitude),
        shape.geometry
    )

    FOR data IN DroughtObservatory
        FILTER data.geometry_hash == shape._key
        COLLECT geo = shape.geometry
        AGGREGATE properties = COUNT()

    RETURN {
        geometry: geo,
        count: properties
    }
