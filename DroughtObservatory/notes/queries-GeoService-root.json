[
    {
        "value": "///\n// Return all data for given point.\n///\nFOR shape IN DroughtObservatoryMap\n    FILTER GEO_INTERSECTS(\n        GEO_POINT(@longitude, @latitude),\n        shape.geometry\n    )\n    SORT shape.geometry_point_radius DESC\n    LET data = (\n        FOR data IN DroughtObservatory\n            FILTER data.geometry_hash == shape._key\n        RETURN MERGE_RECURSIVE(\n            { std_date: data.std_date },\n            data.properties\n        )\n    )\nRETURN {\n    geometry: shape.geometry,\n    properties: data\n}\n",
        "parameter": {
            "longitude": 12.066435816868903,
            "latitude": 42.090494081540236
        },
        "name": "GDO - Return all data for given point",
        "modified_at": 1694888755222
    },
    {
        "value": "///\n// Return all metadata for given point.\n///\nFOR doc IN DroughtObservatoryMap\n    FILTER GEO_INTERSECTS(\n        GEO_POINT(@longitude, @latitude),\n        doc.geometry\n    )\n    FOR dat IN DroughtObservatory\n        FILTER dat.geometry_hash == doc._key\n        COLLECT AGGREGATE start = MIN(dat.std_date),\n                          end = MAX(dat.std_date)\n        INTO groups\nRETURN {\n    start: start,\n    end: end,\n    terms: UNIQUE(FLATTEN(groups[*].dat.std_terms))\n}\n",
        "parameter": {
            "longitude": 12.066435816868903,
            "latitude": 42.090494081540236
        },
        "name": "GDO - Return all metadata for given point",
        "modified_at": 1694795230548
    },
    {
        "value": "///\n// Return all data for given point by geometry.\n///\nFOR shape IN DroughtObservatoryMap\n    FILTER GEO_INTERSECTS(\n        GEO_POINT(@longitude, @latitude),\n        shape.geometry\n    )\n    \n    SORT shape.geometry_point_radius DESC\n\nRETURN {\n    geometry: shape.geometry,\n    geometry_point: shape.geometry_point,\n    geometry_point_radius: shape.geometry_point_radius,\n    data: (\n        FOR data IN DroughtObservatory\n            FILTER data.geometry_hash == shape._key\n            SORT data.std_date ASC\n        RETURN MERGE_RECURSIVE(\n            { std_date: data.std_date },\n            data.properties\n        )\n    )\n}\n",
        "parameter": {
            "longitude": 12.066435816868903,
            "latitude": 42.090494081540236
        },
        "name": "GDO - Return all data for given point by geometry",
        "modified_at": 1695296467042
    },
    {
        "value": "///\n// Return all metadata for given point by geometry.\n///\nFOR shape IN DroughtObservatoryMap\n    FILTER GEO_INTERSECTS(\n        GEO_POINT(@longitude, @latitude),\n        shape.geometry\n    )\n    FOR data IN DroughtObservatory\n        FILTER data.geometry_hash == shape._key\n        COLLECT   geometry = data.geometry_bounds,\n                  geometry_point = data.geometry_point,\n                  geometry_point_radius = data.geometry_point_radius\n        AGGREGATE start = MIN(data.std_date),\n                  end = MAX(data.std_date),\n                  terms = UNIQUE(data.std_terms)\nRETURN {\n    geometry: geometry,\n    geometry_point: geometry_point,\n    geometry_point_radius: geometry_point_radius,\n    start: start,\n    end: end,\n    terms: FLATTEN(terms)\n}\n",
        "parameter": {
            "longitude": 12.066435816868903,
            "latitude": 42.090494081540236
        },
        "name": "GDO - Return all metadata for given point by geometry",
        "modified_at": 1695297240403
    }
]